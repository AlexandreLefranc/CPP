#!/usr/bin/env python3

"""
Created on Tue Aug 16 21:32:54 2022

@author: Alexandre
"""

import sys

def create_hpp(classname):

    header_file = """#ifndef {0}_HPP
# define {0}_HPP

# include <iostream>

class {1}
{{

private:

protected:


public:
\t// Constructors
\t{1}();
\t{1}(const {1}& src);

\t// Destructors
\tvirtual ~{1}();

\t// Operator overload
\t{1}&	operator=(const {1}& rhs);

\t// Getters (getters should return by value or const-reference)

\t// Setters (setters should receive parameters by value or const-reference)

\t// Member functions

\t// Exceptions
\tclass ExampleException: public std::exception
\t{{
\tpublic:
\t\tvirtual const char*	what() const throw();
\t}};

}};

std::ostream&\toperator<<(std::ostream& o, const {1}& obj);

#endif
""".format(classname.upper(), classname)

    with open("{}.hpp".format(classname), "w") as f:
        f.write(header_file)
    print("{}.hpp".format(classname), "created")


def create_cpp(classname):
    class_file = """#include "{0}.hpp"

/*******************************************************************************
*
*                            Constructors
*
*******************************************************************************/

{0}::{0}()
{{
\tstd::cout << "Default {0} constructor called." << std::endl;
\treturn;
}}

{0}::{0}(const {0}& src)
{{
\tstd::cout << "Copy {0} constructor called." << std::endl;
\t*this = src;
\treturn;
}}

/*******************************************************************************
*
*                            Destructor
*
*******************************************************************************/

{0}::~{0}()
{{
\tstd::cout << "{0} Destructor called." << std::endl;
\treturn;
}}

/*******************************************************************************
*
*                            Operator overload
*
*******************************************************************************/

{0}&\t{0}::operator=(const {0}& rhs)
{{
\tstd::cout << "{0} Assignment operator called." << std::endl;
\tif (this != &rhs)
\t{{
\t\t// Copy all attributes
\t}}

\treturn (*this);
}}

std::ostream&\toperator<<(std::ostream& o, const {0}& obj)
{{
\to << "A {0} instance";

\treturn (o);
}}

/*******************************************************************************
*
*                            Accessors
*
*******************************************************************************/

/*******************************************************************************
*
*                            Member functions
*
*******************************************************************************/

/*******************************************************************************
*
*                            Exceptions
*
*******************************************************************************/

const char*	{0}::ExampleException::what() const throw()
{{
	return ("Example exception message");
}}

""".format(classname)

    with open("{}.cpp".format(classname), "w") as f:
        f.write(class_file)
    print("{}.cpp".format(classname), "created")

if __name__ == "__main__":

    for classname in sys.argv[1:]:
        create_hpp(classname)
        create_cpp(classname)

